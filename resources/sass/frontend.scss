@use "sass:math";

@import "theme/theme_variables"; // <-------- Add your variables into this file. Also add variables to overwrite Bootstrap or Understrap variables here
// @import "bootstrap/scss/bootstrap"; // <-------- Loads Bootstrap

@import "bootstrap/scss/functions";
@import "bootstrap/scss/variables";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";

// Layout & components
// @import "bootstrap/scss/forms";
// @import "bootstrap/scss/buttons";
// @import "bootstrap/scss/alert";
// @import "bootstrap/scss/containers";
// @import "bootstrap/scss/grid";

$box-model-sizing: ();
@for $i from 0 through 12 {
  $box-model-sizing: map-merge(
    $box-model-sizing,
    (
      $i: #{$i}rem,
    )
  );
}

$order: ();
@for $i from 0 through 12 {
  $order: map-merge(
    $order,
    (
      $i: #{$i},
    )
  );
}

$grid-template: ();
@for $i from 0 through 12 {
  $grid-template: map-merge(
    $grid-template,
    (
      $i: repeat(#{$i}, minmax(0, 1fr)),
    )
  );
}

$width: (
  none: none,
  auto: auto,
  0: 0,
  25: 25%,
  33: 33.33%,
  50: 50%,
  66: 66.66%,
  75: 75%,
  100: 100%,
  100vw: 100vw, 
);

$height: (
  auto: auto,
  0: 0,
  100: 100%,
  50vh: 50vh,          
  100vh: 100vh,  
);

$utilities: map-merge(
  $utilities,
  (
    "position":
      map-merge(
        map-get($utilities, "position"),
        (
          responsive: true,
        )
      ),
    "object-fit": (
      property: object-fit,
      class: object,
      responsive: true,
      values: (
        fill: fill,
        contain: contain,
        cover: cover,
        none: none,
        scale-down: scale-down,
      ),
    ),
    "top": (
      property: top,
      class: top,
      responsive: true,
      values: map-merge(
        map-get(map-get($utilities, "top"), "values"),
        $box-model-sizing,
      ),
    ),
    "bottom": (
      property: bottom,
      class: bottom,
      responsive: true,
      values: map-merge(
        map-get(map-get($utilities, "bottom"), "values"),
        $box-model-sizing,
      ),
    ),
    "start": (
      property: left,
      class: start,
      responsive: true,
      values: map-merge(
        map-get(map-get($utilities, "start"), "values"),
        $box-model-sizing,
      ),
    ),
    "end": (
      property: right,
      class: end,
      responsive: true,
      values: map-merge(
        map-get(map-get($utilities, "end"), "values"),
        $box-model-sizing,
      ),
    ),
    "grid-template-rows": (
      property: grid-template-rows,
      class: grid-template-rows,
      responsive: true,
      values: $grid-template,
    ),
    "grid-template-colums": (
      property: grid-template-columns,
      class: grid-template-columns,
      responsive: true,
      values: $grid-template,
    ),
    "order": (
      property: order,
      class: order,
      responsive: true,
      values: map-merge(
        $order,
        (
          -1: -1,
          99: 99,
          999: 999,
          9999: 9999,
        ),
      ),
    ),
    "min-width": (
      property: min-width,
      class: min-w,
      responsive: true,
      values: 
        map-merge(
          map-get(map-get($utilities, "width"), "values"),
          $width
        ),
    ),
    "width":
      map-merge(
        map-get($utilities, "width"),
        (
          responsive: true,
          values:
            map-merge(
              map-get(map-get($utilities, "width"), "values"),
              $width
            ),
        )
      ),
    "max-width": (
      property: max-width,
      class: max-w,
      responsive: true,
      values: 
        map-merge(
          map-get(map-get($utilities, "width"), "values"),
          $width
        ),
    ),
    "min-height": (
      property: min-height,
      class: min-h,
      responsive: true,
      values:
        map-merge(
          map-get(map-get($utilities, "height"), "values"),
          $height
        ),
    ),
    "height":
      map-merge(
        map-get($utilities, "height"),
        (
          responsive: true,
          values:
            map-merge(
              map-get(map-get($utilities, "height"), "values"),
              $height
            ),
        )
      ),
    "max-height": (
      property: max-height,
      class: max-h,
      responsive: true,
      values:
        map-merge(
          map-get(map-get($utilities, "height"), "values"),
          $height
        ),
    ),
    "margin":
      map-merge(
        map-get($utilities, "margin"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "margin-y":
      map-merge(
        map-get($utilities, "margin-y"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "margin-top":
      map-merge(
        map-get($utilities, "margin-top"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "margin-end":
      map-merge(
        map-get($utilities, "margin-end"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "margin-bottom":
      map-merge(
        map-get($utilities, "margin-bottom"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "margin-start":
      map-merge(
        map-get($utilities, "margin-start"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding":
      map-merge(
        map-get($utilities, "padding"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding-y":
      map-merge(
        map-get($utilities, "padding-y"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding-top":
      map-merge(
        map-get($utilities, "padding-top"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding-end":
      map-merge(
        map-get($utilities, "padding-end"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding-bottom":
      map-merge(
        map-get($utilities, "padding-bottom"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "padding-start":
      map-merge(
        map-get($utilities, "padding-start"),
        (
          responsive: true,
          values: $box-model-sizing,
        )
      ),
    "gap":
      map-merge(
        map-get($utilities, "gap"),
        (
          responsive: true,
          values: $box-model-sizing
        )
      ),
    "column-gap": (
      css-var: true,
      css-variable-name: col-gap,
      class: gx,
      responsive: true,
      values: $box-model-sizing,
    ),
    "row-gap": (
      css-var: true,
      css-variable-name: row-gap,
      class: gy,
      values: $box-model-sizing,
    ),
    "module-gap": (
      css-var: true,
      css-variable-name: module-gap,
      class: mg,
      values: $box-model-sizing,
    ),
    "background-color": (
      property: background-color,
      class: bg,
      responsive: true,
      values:
        map-merge(
          map-get(map-get($utilities, "color"), "values"),
          (tertiary: rgba(var(--bs-tertiary-rgb), var(--bs-text-opacity))),
        ),
    ),
    "background-size": (
      property: background-size,
      class: bg,
      responsive: true,
      values: (
        none: none,
        100: 100% auto,
        cover: cover,
        contain: contain,
        fit: fit,
        fill: fill,
        scale-down: scale-down,
      ),
    ),
    "background-position": (
      property: background-position,
      class: bg,
      responsive: true,
      values: (
        left: left,
        left-top: left top,
        left-bottom: left bottom,
        right: right,
        right-top: right top,
        right-bottom: right bottom,
        center: center,
        center-top: center top,
        center-bottom: center bottom,
      ),
    ),
    "background-repeat": (
      property: background-repeat,
      class: bg,
      responsive: true,
      values: (
        repeat: repeat,
        repeat-x: repeat-x,
        repeat-y: repeat-y,
        no-repeat: no-repeat,
      ),
    ),
    "background-blend-mode": (
      property: background-blend-mode,
      class: bg-blend,
      values: normal multiply screen overlay darken lighten color-dodge
        saturation color luminosity,
    ),
    "color": (
      property: color,
      class: text,
      local-vars: (
        "text-opacity": 1
      ),
      responsive: true,
      values:
        map-merge(
          map-get(map-get($utilities, "color"), "values"),
          (tertiary: rgba(var(--bs-tertiary-rgb), var(--bs-text-opacity))),
        ),
    ), 
    "font-family": (
      property: font-family,
      class: font-family,
      responsive: true,
      values: serif sans-serif,
    ),
    "font-weight": (
      property: font-weight,
      class: font,
      responsive: true,
      values: normal bold,
    ),
  )
);

[class*="gx-"] {
  column-gap: var(--bs-col-gap);
}
[class*="gy-"] {
  row-gap: var(--bs-row-gap);
}

@import "bootstrap/scss/utilities/api";

// @import "theme/colors"; // <-------- This creates the necessary bootstrap color classes.
// @import "theme/blocks"; // <-------- This adds Bootstrap styles to blocks.

@import "mixins/mixins";
@import "theme/layout";

.gx-taggable {
  @include responsive-inline-helper(column-gap, --gx);
}
.gy-taggable {
  @include responsive-inline-helper(row-gap, --gy);
}
.mt-taggable {
  @include responsive-inline-helper(margin-top, --mt);
}
.mb-taggable {
  @include responsive-inline-helper(margin-bottom, --mb);
}
.me-taggable {
  @include responsive-inline-helper(margin-end, --me);
}
.ms-taggable {
  @include responsive-inline-helper(margin-start, --ms);
}
.pt-taggable {
  @include responsive-inline-helper(padding-top, --pt);
}
.pb-taggable {
  @include responsive-inline-helper(padding-bottom, --pb);
}
.pe-taggable {
  @include responsive-inline-helper(padding-end, --pe);
}
.ps-taggable {
  @include responsive-inline-helper(padding-start, --ps);
}
.min-width-taggable {
  @include responsive-inline-helper(min-width, --min-width);
}
.width-taggable {
  @include responsive-inline-helper(width, --width);
}
.max-width-taggable {
  @include responsive-inline-helper(max-width, --max-width);
}
.min-height-taggable {
  @include responsive-inline-helper(min-height, --min-height);
}
.height-taggable {
  @include responsive-inline-helper(height, --height);
}
.max-height-taggable {
  @include responsive-inline-helper(max-height, --max-height);
}
.font-family-taggable {
  @include responsive-inline-helper(font-family, --font-family);
}